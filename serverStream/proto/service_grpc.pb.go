// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GreetService_GreetMultiple_FullMethodName = "/serverStream.GreetService/GreetMultiple"
)

// GreetServiceClient is the client API for GreetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetServiceClient interface {
	GreetMultiple(ctx context.Context, in *GreetReq, opts ...grpc.CallOption) (GreetService_GreetMultipleClient, error)
}

type greetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetServiceClient(cc grpc.ClientConnInterface) GreetServiceClient {
	return &greetServiceClient{cc}
}

func (c *greetServiceClient) GreetMultiple(ctx context.Context, in *GreetReq, opts ...grpc.CallOption) (GreetService_GreetMultipleClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[0], GreetService_GreetMultiple_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceGreetMultipleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetService_GreetMultipleClient interface {
	Recv() (*GreetResp, error)
	grpc.ClientStream
}

type greetServiceGreetMultipleClient struct {
	grpc.ClientStream
}

func (x *greetServiceGreetMultipleClient) Recv() (*GreetResp, error) {
	m := new(GreetResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetServiceServer is the server API for GreetService service.
// All implementations must embed UnimplementedGreetServiceServer
// for forward compatibility
type GreetServiceServer interface {
	GreetMultiple(*GreetReq, GreetService_GreetMultipleServer) error
	mustEmbedUnimplementedGreetServiceServer()
}

// UnimplementedGreetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetServiceServer struct {
}

func (UnimplementedGreetServiceServer) GreetMultiple(*GreetReq, GreetService_GreetMultipleServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetMultiple not implemented")
}
func (UnimplementedGreetServiceServer) mustEmbedUnimplementedGreetServiceServer() {}

// UnsafeGreetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetServiceServer will
// result in compilation errors.
type UnsafeGreetServiceServer interface {
	mustEmbedUnimplementedGreetServiceServer()
}

func RegisterGreetServiceServer(s grpc.ServiceRegistrar, srv GreetServiceServer) {
	s.RegisterService(&GreetService_ServiceDesc, srv)
}

func _GreetService_GreetMultiple_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GreetReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetServiceServer).GreetMultiple(m, &greetServiceGreetMultipleServer{stream})
}

type GreetService_GreetMultipleServer interface {
	Send(*GreetResp) error
	grpc.ServerStream
}

type greetServiceGreetMultipleServer struct {
	grpc.ServerStream
}

func (x *greetServiceGreetMultipleServer) Send(m *GreetResp) error {
	return x.ServerStream.SendMsg(m)
}

// GreetService_ServiceDesc is the grpc.ServiceDesc for GreetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "serverStream.GreetService",
	HandlerType: (*GreetServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GreetMultiple",
			Handler:       _GreetService_GreetMultiple_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
