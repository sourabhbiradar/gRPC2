// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: srvc.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MaxNumService_MaxNum_FullMethodName = "/maxNum.MaxNumService/MaxNum"
)

// MaxNumServiceClient is the client API for MaxNumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaxNumServiceClient interface {
	MaxNum(ctx context.Context, opts ...grpc.CallOption) (MaxNumService_MaxNumClient, error)
}

type maxNumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaxNumServiceClient(cc grpc.ClientConnInterface) MaxNumServiceClient {
	return &maxNumServiceClient{cc}
}

func (c *maxNumServiceClient) MaxNum(ctx context.Context, opts ...grpc.CallOption) (MaxNumService_MaxNumClient, error) {
	stream, err := c.cc.NewStream(ctx, &MaxNumService_ServiceDesc.Streams[0], MaxNumService_MaxNum_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &maxNumServiceMaxNumClient{stream}
	return x, nil
}

type MaxNumService_MaxNumClient interface {
	Send(*NumReq) error
	Recv() (*NumResp, error)
	grpc.ClientStream
}

type maxNumServiceMaxNumClient struct {
	grpc.ClientStream
}

func (x *maxNumServiceMaxNumClient) Send(m *NumReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *maxNumServiceMaxNumClient) Recv() (*NumResp, error) {
	m := new(NumResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MaxNumServiceServer is the server API for MaxNumService service.
// All implementations must embed UnimplementedMaxNumServiceServer
// for forward compatibility
type MaxNumServiceServer interface {
	MaxNum(MaxNumService_MaxNumServer) error
	mustEmbedUnimplementedMaxNumServiceServer()
}

// UnimplementedMaxNumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMaxNumServiceServer struct {
}

func (UnimplementedMaxNumServiceServer) MaxNum(MaxNumService_MaxNumServer) error {
	return status.Errorf(codes.Unimplemented, "method MaxNum not implemented")
}
func (UnimplementedMaxNumServiceServer) mustEmbedUnimplementedMaxNumServiceServer() {}

// UnsafeMaxNumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaxNumServiceServer will
// result in compilation errors.
type UnsafeMaxNumServiceServer interface {
	mustEmbedUnimplementedMaxNumServiceServer()
}

func RegisterMaxNumServiceServer(s grpc.ServiceRegistrar, srv MaxNumServiceServer) {
	s.RegisterService(&MaxNumService_ServiceDesc, srv)
}

func _MaxNumService_MaxNum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MaxNumServiceServer).MaxNum(&maxNumServiceMaxNumServer{stream})
}

type MaxNumService_MaxNumServer interface {
	Send(*NumResp) error
	Recv() (*NumReq, error)
	grpc.ServerStream
}

type maxNumServiceMaxNumServer struct {
	grpc.ServerStream
}

func (x *maxNumServiceMaxNumServer) Send(m *NumResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *maxNumServiceMaxNumServer) Recv() (*NumReq, error) {
	m := new(NumReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MaxNumService_ServiceDesc is the grpc.ServiceDesc for MaxNumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaxNumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "maxNum.MaxNumService",
	HandlerType: (*MaxNumServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MaxNum",
			Handler:       _MaxNumService_MaxNum_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "srvc.proto",
}
